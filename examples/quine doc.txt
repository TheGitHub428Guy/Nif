A quine. Prints its own source code (this is the documented version, it actually prints the undocumented version of itself). Has 2281 commands and finishes after 142,461 steps. (This version takes 3 more steps due to the comments in brackets.)

[Over 75% of this program is taken up by this part, autogenerated using a Stax program.
This one does the same thing as that Stax program, given the last 1/4 of the program as input:
""Xd"&-;~]["_{{nh-|cd|('&x+Xd_W.&~x+XdFx
This encodes the latter part of the program using this system: Any value > 0 means to switch to the next character in the sequence &-;~][ (wrapping around), and 0 means to print the current character selected (starts at the &). Note that the sequence is actually read from top to bottom, so this is actually encoded in reverse.
Here we go!]
&~&&&&~&~&~&~&~&~&~&~&~&~&~&~&~&&~&~&~&~&~&~&~&~&~&~&~&~&&&&~&&&&~&~&&&~&&~&&&&~&&~&&&&~&&&&&&~&~&&&&~&&&~&&~&&&~&~&~&~&~&~&~&~&~&~&~&~&&~&~&~&~&~&~&~&~&~&~&~&~&&&&~&&&&~&&&&~&&&~&~&~&~&~&~&~&~&~&&~&~&~&~&~&~&~&~&~&~&&~&&&~&&&~&~&~&~&~&~&~&~&~&~&~&~&&~&~&~&~&~&~&~&~&~&~&~&~&&&&~&&&&~&&~&&&&&~&~&~&~&~&~&~&~&~&~&~&~&~&&~&~&~&~&~&~&~&~&~&~&~&~&&&&~&&&&~&~&&&&~&&&~&~&~&~&~&~&~&~&~&&~&~&~&~&~&~&~&~&~&~&&&&~&&&~&~&~&~&~&~&~&~&~&&~&~&~&~&~&~&~&~&~&~&&&&~&&&~&~&~&&~&~&~&~&&&&~&&&~&~&~&~&~&~&~&&~&~&~&~&~&~&~&~&&&&&&~&~&~&~&~&~&~&~&&~&~&~&~&~&~&~&~&&&&&&~&&&&&~&&&~&~&~&&~&~&~&~&&&&~&~&&&&~&&&&~&&&~&~&~&~&~&~&~&~&&~&~&~&~&~&~&~&~&&&&~&&&&~&&&&~&~&&&&~&&&&&&~&~&~&~&&~&~&~&~&&&&~&~&&&&~&&&&&&~&~&&~&~&&&&&&~&~&&&&&~&&&~&&~&~&&&&~&&&&~&&&&~&~&&&&~&&&&~&~&&&&~&&&&&&~&~&~&~&~&~&~&~&~&~&~&~&~&~&&~&~&~&~&~&~&~&~&~&~&~&~&~&~&&&&~&~&&&&~&&&~&&~&&&&~&&~&&~&&&&~&~&&~&~&&&&~&~&&&&~&&&&~&&&~&~&~&&~&~&&&&~&&&&~&~&&&&~&&&~&~&~&&~&~&~&~&&&~&&~&&&&~&&&&~&&&~&~&~&&~&~&~&~&&&~&&~&&&&~&&~&&&&~&&&&&&~&~&&&&~&&&&~&&&~&~&~&~&&~&~&~&~&&&&~&&&&~&&~&&&&&~&&&&&~&~&~&&&&~&&&&&&~&~&&~&~&&&&~&&&&~&&&&~&~&&&&~&&&&~&&&~&&~&~&&&~&&~&&&&~&&~&&&&~&&&&&&~&~&&&&~&&&&~&&&~&&~&~&&~&&&&&&~&&&&~&&&~&~&~&&~&~&&&&~&&&&~&~&&&&&&~&~&~&~&~&&~&~&~&~&&&&~&&&&~&&&&&&~&~&&&&&~&&&~&&~&~&&&&~&&&&~&&&&~&~&&&&~&&&&&&~&~&&&&&~&&&~&&~&~&&&&~&&&&~&&&&~&~&&&&~&&&&&&~&~&&&&&~&&&~&&~&~&&&&~&&&&~&&&&~&~&&&&~&&&&&&~&~&&~&~&&&&~&&&~&&~&~&&&&&&~&~&~&~&~&&~&~&~&~&&&&~&&&&~&&&&&&~&~&&&&&~&&&~&&~&~&&&&~&&&&~&&&&~&~&&&&~&&&&&&~&~&&&&&~&&&~&&~&~&&&&~&&&&~&&&&~&~&&&&~&&&&&&~&~&&&&&~&&&~&&~&~&&&&~&&&&~&&&&~&~&&&&~&&&&&&~&~&&&&&~&&&~&&~&~&&&&~&&&&~&&&&~&~&&&&~&&&&&&~&~&&&&&~&&&~&&~&~&&&&~&&&&~&&&&~&~&&&&~&&&&~&~&&&&~&&&&&&~&~&~&~&~&~&~&~&&~&~&~&~&~&~&~&~&&&&~&&&&~&&&&&&~&&~&~

Now that that's done, we can get to the interesting part of the code.
I'll show both the original code, and some pseudocode that I made up that nobody will understand haha weee

Part 1: Printing the decoded sequence
Make _1 (can't use hyphens, so I'll just use _ instead), as a marker for where the end of the sequence is.
T	&&-
Make 126=T, representing a tilde.
4	&~&&&&&&&&--------
:	&~~
5z	&~~&~&&-~-- &~~&~&&-~-- &~~&~&&-~-- &~~&~&&-~-- &~~&~&&-~--
2 _	&~&&&&---- -
Make 38=A, representing an ampersand. This and the tilde are made beforehand so that they won't have to be made every time an ampersand character is needed.
\)	&&-~ &&--
3z	&~~&~&&-~-- &~~&~&&-~-- &~~&~&&-~--
2 _	&~&&&&---- -

(stack order here, bottom to top: Nnnn...nnnTA) Bring the bottom element to the top, then...
#^ #{	&&~&&---~ &[
 (stack: n...nTAN) Swap to A and output without popping, then swap back.
 \q\	 &&-~ &~~;[&~] &&-~
 (n...nTAN) Then, if the current element < 1 (1 minus n > 0)...
 :1\_{	 &~~ &~&&-- &~~~ -[
  (n...nTAN) switch to T and output without popping, then swap back.
  2^q2v	  &~&&&&----~ &~~;[&~]	&&&&---~
 0}	 &~]
 (n...nTAN) Put N at the end of the sequence, then bring the bottom element to the top again.
 2v#^	 &&&&---~ &&~&&---~
 (n...nNTAn) If this element > negative 1, then go back to the start.
:)}$	&~~&&--][&~]

Part 2: Printing the decoded sequence
Make 45=H (a hyphen)
:7)	&~~&&&&&&&&&&&&&&--------------
Make 91=L (a left bracket)
:z)	&~~ &~~&~&&-~-- &&--
Make 93=R (a right bracket)
:2)	&~~ &&&&----
Make 59=S (semicolon) by subtracting 93 minus 38, then adding 4.
:4^	&~~ &~&&&&&&&&--------~
:2v _	&~~ &&&&---~ -
4)	&&&&&&&&--------
Currently, the variables on the top of the stack are arranged like this: THLRAS
This next part of the code rearranges them to LRTSHA
4v	  &&&&&&&&-------~
2v	      &&&&---~
5v	&&&&&&&&&&---------~
5v	&&&&&&&&&&---------~

While the stack has >6 elements...
l6_{	& &~&&&&&&&&&&&&------------ -[
 Bring the top element of the sequence, then if it's greater than 0...
 6^{	 &~&&&&&&&&&&&&------------~ [
  Switch to the next symbol, then
  5v	  &&&&&&&&&&---------~
 keep doing this until the element isn't greater than 0.
 6^}	 &~&&&&&&&&&&&&------------~ ]
 Then, print the current symbol without popping.
 q	 &~~;[&~]
l6_}	& &~&&&&&&&&&&&&------------ -]